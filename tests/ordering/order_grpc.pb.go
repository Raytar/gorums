// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ordering

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GorumsTestClient is the client API for GorumsTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GorumsTestClient interface {
	QC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	UnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type gorumsTestClient struct {
	cc *grpc.ClientConn
}

func NewGorumsTestClient(cc *grpc.ClientConn) GorumsTestClient {
	return &gorumsTestClient{cc}
}

func (c *gorumsTestClient) QC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ordering.GorumsTest/QC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gorumsTestClient) UnaryRPC(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ordering.GorumsTest/UnaryRPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GorumsTestServer is the server API for GorumsTest service.
type GorumsTestServer interface {
	QC(context.Context, *Request) (*Response, error)
	UnaryRPC(context.Context, *Request) (*Response, error)
}

// UnimplementedGorumsTestServer can be embedded to have forward compatible implementations.
type UnimplementedGorumsTestServer struct {
}

func (*UnimplementedGorumsTestServer) QC(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QC not implemented")
}
func (*UnimplementedGorumsTestServer) UnaryRPC(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryRPC not implemented")
}

func RegisterGorumsTestServer(s *grpc.Server, srv GorumsTestServer) {
	s.RegisterService(&_GorumsTest_serviceDesc, srv)
}

func _GorumsTest_QC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsTestServer).QC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.GorumsTest/QC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsTestServer).QC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GorumsTest_UnaryRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GorumsTestServer).UnaryRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ordering.GorumsTest/UnaryRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GorumsTestServer).UnaryRPC(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GorumsTest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ordering.GorumsTest",
	HandlerType: (*GorumsTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QC",
			Handler:    _GorumsTest_QC_Handler,
		},
		{
			MethodName: "UnaryRPC",
			Handler:    _GorumsTest_UnaryRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/protoc-gen-gorums/tests/ordering/order.proto",
}
