// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package benchmark

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BenchmarkClient is the client API for Benchmark service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BenchmarkClient interface {
	StartServerBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopServerBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Result, error)
	StartBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	StopBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*MemoryStat, error)
	// benchmarks
	UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedQC(ctx context.Context, opts ...grpc.CallOption) (Benchmark_OrderedQCClient, error)
	UnorderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error)
	OrderedSlowServer(ctx context.Context, opts ...grpc.CallOption) (Benchmark_OrderedSlowServerClient, error)
}

type benchmarkClient struct {
	cc *grpc.ClientConn
}

func NewBenchmarkClient(cc *grpc.ClientConn) BenchmarkClient {
	return &benchmarkClient{cc}
}

func (c *benchmarkClient) StartServerBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StartServerBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StopServerBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StopServerBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StartBenchmark(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StartBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) StopBenchmark(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*MemoryStat, error) {
	out := new(MemoryStat)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/StopBenchmark", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) UnorderedQC(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedQC(ctx context.Context, opts ...grpc.CallOption) (Benchmark_OrderedQCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Benchmark_serviceDesc.Streams[0], "/benchmark.Benchmark/OrderedQC", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkOrderedQCClient{stream}
	return x, nil
}

type Benchmark_OrderedQCClient interface {
	Send(*Echo) error
	Recv() (*Echo, error)
	grpc.ClientStream
}

type benchmarkOrderedQCClient struct {
	grpc.ClientStream
}

func (x *benchmarkOrderedQCClient) Send(m *Echo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *benchmarkOrderedQCClient) Recv() (*Echo, error) {
	m := new(Echo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *benchmarkClient) UnorderedSlowServer(ctx context.Context, in *Echo, opts ...grpc.CallOption) (*Echo, error) {
	out := new(Echo)
	err := c.cc.Invoke(ctx, "/benchmark.Benchmark/UnorderedSlowServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *benchmarkClient) OrderedSlowServer(ctx context.Context, opts ...grpc.CallOption) (Benchmark_OrderedSlowServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Benchmark_serviceDesc.Streams[1], "/benchmark.Benchmark/OrderedSlowServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &benchmarkOrderedSlowServerClient{stream}
	return x, nil
}

type Benchmark_OrderedSlowServerClient interface {
	Send(*Echo) error
	Recv() (*Echo, error)
	grpc.ClientStream
}

type benchmarkOrderedSlowServerClient struct {
	grpc.ClientStream
}

func (x *benchmarkOrderedSlowServerClient) Send(m *Echo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *benchmarkOrderedSlowServerClient) Recv() (*Echo, error) {
	m := new(Echo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BenchmarkServer is the server API for Benchmark service.
type BenchmarkServer interface {
	StartServerBenchmark(context.Context, *StartRequest) (*StartResponse, error)
	StopServerBenchmark(context.Context, *StopRequest) (*Result, error)
	StartBenchmark(context.Context, *StartRequest) (*StartResponse, error)
	StopBenchmark(context.Context, *StopRequest) (*MemoryStat, error)
	// benchmarks
	UnorderedQC(context.Context, *Echo) (*Echo, error)
	OrderedQC(Benchmark_OrderedQCServer) error
	UnorderedSlowServer(context.Context, *Echo) (*Echo, error)
	OrderedSlowServer(Benchmark_OrderedSlowServerServer) error
}

// UnimplementedBenchmarkServer can be embedded to have forward compatible implementations.
type UnimplementedBenchmarkServer struct {
}

func (*UnimplementedBenchmarkServer) StartServerBenchmark(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartServerBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StopServerBenchmark(context.Context, *StopRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopServerBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StartBenchmark(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) StopBenchmark(context.Context, *StopRequest) (*MemoryStat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBenchmark not implemented")
}
func (*UnimplementedBenchmarkServer) UnorderedQC(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedQC not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedQC(Benchmark_OrderedQCServer) error {
	return status.Errorf(codes.Unimplemented, "method OrderedQC not implemented")
}
func (*UnimplementedBenchmarkServer) UnorderedSlowServer(context.Context, *Echo) (*Echo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnorderedSlowServer not implemented")
}
func (*UnimplementedBenchmarkServer) OrderedSlowServer(Benchmark_OrderedSlowServerServer) error {
	return status.Errorf(codes.Unimplemented, "method OrderedSlowServer not implemented")
}

func RegisterBenchmarkServer(s *grpc.Server, srv BenchmarkServer) {
	s.RegisterService(&_Benchmark_serviceDesc, srv)
}

func _Benchmark_StartServerBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StartServerBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StartServerBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StartServerBenchmark(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StopServerBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StopServerBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StopServerBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StopServerBenchmark(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StartBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StartBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StartBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StartBenchmark(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_StopBenchmark_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).StopBenchmark(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/StopBenchmark",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).StopBenchmark(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_UnorderedQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedQC(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedQC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BenchmarkServer).OrderedQC(&benchmarkOrderedQCServer{stream})
}

type Benchmark_OrderedQCServer interface {
	Send(*Echo) error
	Recv() (*Echo, error)
	grpc.ServerStream
}

type benchmarkOrderedQCServer struct {
	grpc.ServerStream
}

func (x *benchmarkOrderedQCServer) Send(m *Echo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *benchmarkOrderedQCServer) Recv() (*Echo, error) {
	m := new(Echo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Benchmark_UnorderedSlowServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Echo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenchmarkServer).UnorderedSlowServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/benchmark.Benchmark/UnorderedSlowServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenchmarkServer).UnorderedSlowServer(ctx, req.(*Echo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Benchmark_OrderedSlowServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BenchmarkServer).OrderedSlowServer(&benchmarkOrderedSlowServerServer{stream})
}

type Benchmark_OrderedSlowServerServer interface {
	Send(*Echo) error
	Recv() (*Echo, error)
	grpc.ServerStream
}

type benchmarkOrderedSlowServerServer struct {
	grpc.ServerStream
}

func (x *benchmarkOrderedSlowServerServer) Send(m *Echo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *benchmarkOrderedSlowServerServer) Recv() (*Echo, error) {
	m := new(Echo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Benchmark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "benchmark.Benchmark",
	HandlerType: (*BenchmarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServerBenchmark",
			Handler:    _Benchmark_StartServerBenchmark_Handler,
		},
		{
			MethodName: "StopServerBenchmark",
			Handler:    _Benchmark_StopServerBenchmark_Handler,
		},
		{
			MethodName: "StartBenchmark",
			Handler:    _Benchmark_StartBenchmark_Handler,
		},
		{
			MethodName: "StopBenchmark",
			Handler:    _Benchmark_StopBenchmark_Handler,
		},
		{
			MethodName: "UnorderedQC",
			Handler:    _Benchmark_UnorderedQC_Handler,
		},
		{
			MethodName: "UnorderedSlowServer",
			Handler:    _Benchmark_UnorderedSlowServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrderedQC",
			Handler:       _Benchmark_OrderedQC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "OrderedSlowServer",
			Handler:       _Benchmark_OrderedSlowServer_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "benchmark.proto",
}
