syntax = "proto3";

package benchmark;

option go_package = "github.com/relab/gorums/benchmark";

import "gorums.proto";

message Empty {}

message Echo {
  bytes payload = 1;
  uint64 ID = 2;
}

message TimedMsg {
  int64 SendTime = 1;
  bytes payload = 2;
  uint64 ID = 3;
}

message StartRequest {}

message StartResponse {}

message StopRequest {}

message Result {
  string Name = 1;
  uint64 TotalOps = 2;
  int64 TotalTime = 3;
  double Throughput = 4;
  double LatencyAvg = 5;
  double LatencyVar = 6;
  uint64 AllocsPerOp = 7;
  uint64 MemPerOp = 8;
  repeated MemoryStat ServerStats = 9;
}

message MemoryStat {
  uint64 Allocs = 1;
  uint64 Memory = 2;
}

message MemoryStatList { repeated MemoryStat MemoryStats = 1; }

service Benchmark {
  rpc StartServerBenchmark(StartRequest) returns (StartResponse) {
    option (gorums.qc) = true;
  }

  rpc StopServerBenchmark(StopRequest) returns (Result) {
    option (gorums.qc) = true;
  }

  rpc StartBenchmark(StartRequest) returns (StartResponse) {
    option (gorums.qc) = true;
  }

  rpc StopBenchmark(StopRequest) returns (MemoryStat) {
    option (gorums.qc) = true;
    option (gorums.custom_return_type) = "MemoryStatList";
  }

  // benchmarks
  rpc UnorderedQC(Echo) returns (Echo) { option (gorums.qc) = true; }

  rpc OrderedQC(stream Echo) returns (stream Echo) {
    option (gorums.qc_strict_ordering) = "ID";
  }

  rpc UnorderedSlowServer(Echo) returns (Echo) { option (gorums.qc) = true; }

  rpc OrderedSlowServer(stream Echo) returns (stream Echo) {
    option (gorums.qc_strict_ordering) = "ID";
  }
}
