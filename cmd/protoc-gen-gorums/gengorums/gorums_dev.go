package gengorums

import (
	"fmt"
	"log"
	"os"

	"google.golang.org/protobuf/compiler/protogen"
)

// GenerateDevFile generates a _{{gorumsType}}_gorums.pb.go file containing Gorums service definitions.
func GenerateDevFile(gorumsType string, gen *protogen.Plugin, file *protogen.File) {
	if len(file.Services) == 0 || !hasGorumsType(file.Services, gorumsType) {
		// there is nothing for this plugin to do
		fmt.Fprintf(os.Stderr, "ignoring %s\n", gorumsType)
		return
	}
	if len(file.Services) > 1 {
		// To build multiple services, make separate proto files and
		// run the plugin separately for each proto file.
		// These cannot share the same Go package.
		log.Fatalln("Gorums does not support multiple services in the same proto file.")
	}

	// generate dev file for given gorumsType
	filename := file.GeneratedFilenamePrefix + "_" + gorumsType + "_gorums.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-gorums. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	data := servicesData{g, file.Services}
	switch gorumsType {
	case "node":
		g.P(mustExecute(parseTemplate("Node", node), data))
	case "qspec":
		g.P(mustExecute(parseTemplate("QuorumSpec", qspecInterface), data))
	case "types":
		g.P(mustExecute(parseTemplate("DataTypes", datatypes), data))
	default:
		if methodOption, ok := gorumsTypes[gorumsType]; ok {
			genGorumsMethods(data, methodOption)
		} else if methodOption, ok := strictOrderingTypes[gorumsType]; ok {
			genGorumsMethods(data, methodOption)
		}
	}
	g.P()
}
