// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calltypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CalltypesClient is the client API for Calltypes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalltypesClient interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// QuorumCall plain.
	QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Multicast plain. Response type is not needed here.
	Multicast(ctx context.Context, opts ...grpc.CallOption) (Calltypes_MulticastClient, error)
	// QuorumCallFuture plain.
	QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type calltypesClient struct {
	cc *grpc.ClientConn
}

func NewCalltypesClient(cc *grpc.ClientConn) CalltypesClient {
	return &calltypesClient{cc}
}

func (c *calltypesClient) GRPCCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.Calltypes/GRPCCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calltypesClient) QuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.Calltypes/QuorumCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calltypesClient) Multicast(ctx context.Context, opts ...grpc.CallOption) (Calltypes_MulticastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Calltypes_serviceDesc.Streams[0], "/dev.Calltypes/Multicast", opts...)
	if err != nil {
		return nil, err
	}
	x := &calltypesMulticastClient{stream}
	return x, nil
}

type Calltypes_MulticastClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type calltypesMulticastClient struct {
	grpc.ClientStream
}

func (x *calltypesMulticastClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calltypesMulticastClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calltypesClient) QuorumCallFuture(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dev.Calltypes/QuorumCallFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalltypesServer is the server API for Calltypes service.
type CalltypesServer interface {
	// GRPCCall plain gRPC call; testing that Gorums can ignore these, but that
	// they are added to the _grpc.pb.go generated file.
	GRPCCall(context.Context, *Request) (*Response, error)
	// QuorumCall plain.
	QuorumCall(context.Context, *Request) (*Response, error)
	// Multicast plain. Response type is not needed here.
	Multicast(Calltypes_MulticastServer) error
	// QuorumCallFuture plain.
	QuorumCallFuture(context.Context, *Request) (*Response, error)
}

// UnimplementedCalltypesServer can be embedded to have forward compatible implementations.
type UnimplementedCalltypesServer struct {
}

func (*UnimplementedCalltypesServer) GRPCCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GRPCCall not implemented")
}
func (*UnimplementedCalltypesServer) QuorumCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCall not implemented")
}
func (*UnimplementedCalltypesServer) Multicast(Calltypes_MulticastServer) error {
	return status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (*UnimplementedCalltypesServer) QuorumCallFuture(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuorumCallFuture not implemented")
}

func RegisterCalltypesServer(s *grpc.Server, srv CalltypesServer) {
	s.RegisterService(&_Calltypes_serviceDesc, srv)
}

func _Calltypes_GRPCCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalltypesServer).GRPCCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Calltypes/GRPCCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalltypesServer).GRPCCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calltypes_QuorumCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalltypesServer).QuorumCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Calltypes/QuorumCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalltypesServer).QuorumCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calltypes_Multicast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalltypesServer).Multicast(&calltypesMulticastServer{stream})
}

type Calltypes_MulticastServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type calltypesMulticastServer struct {
	grpc.ServerStream
}

func (x *calltypesMulticastServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calltypesMulticastServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Calltypes_QuorumCallFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalltypesServer).QuorumCallFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Calltypes/QuorumCallFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalltypesServer).QuorumCallFuture(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Calltypes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.Calltypes",
	HandlerType: (*CalltypesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GRPCCall",
			Handler:    _Calltypes_GRPCCall_Handler,
		},
		{
			MethodName: "QuorumCall",
			Handler:    _Calltypes_QuorumCall_Handler,
		},
		{
			MethodName: "QuorumCallFuture",
			Handler:    _Calltypes_QuorumCallFuture_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multicast",
			Handler:       _Calltypes_Multicast_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "testprotos/calltypes/calltypes.proto",
}
