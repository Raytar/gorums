// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dev

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GorumsStrictOrderingClient is the client API for GorumsStrictOrdering service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GorumsStrictOrderingClient interface {
	NodeStream(ctx context.Context, opts ...grpc.CallOption) (GorumsStrictOrdering_NodeStreamClient, error)
}

type gorumsStrictOrderingClient struct {
	cc *grpc.ClientConn
}

func NewGorumsStrictOrderingClient(cc *grpc.ClientConn) GorumsStrictOrderingClient {
	return &gorumsStrictOrderingClient{cc}
}

func (c *gorumsStrictOrderingClient) NodeStream(ctx context.Context, opts ...grpc.CallOption) (GorumsStrictOrdering_NodeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GorumsStrictOrdering_serviceDesc.Streams[0], "/gorums.GorumsStrictOrdering/NodeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gorumsStrictOrderingNodeStreamClient{stream}
	return x, nil
}

type GorumsStrictOrdering_NodeStreamClient interface {
	Send(*GorumsMessage) error
	Recv() (*GorumsMessage, error)
	grpc.ClientStream
}

type gorumsStrictOrderingNodeStreamClient struct {
	grpc.ClientStream
}

func (x *gorumsStrictOrderingNodeStreamClient) Send(m *GorumsMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gorumsStrictOrderingNodeStreamClient) Recv() (*GorumsMessage, error) {
	m := new(GorumsMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GorumsStrictOrderingServer is the server API for GorumsStrictOrdering service.
type GorumsStrictOrderingServer interface {
	NodeStream(GorumsStrictOrdering_NodeStreamServer) error
}

// UnimplementedGorumsStrictOrderingServer can be embedded to have forward compatible implementations.
type UnimplementedGorumsStrictOrderingServer struct {
}

func (*UnimplementedGorumsStrictOrderingServer) NodeStream(GorumsStrictOrdering_NodeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NodeStream not implemented")
}

func RegisterGorumsStrictOrderingServer(s *grpc.Server, srv GorumsStrictOrderingServer) {
	s.RegisterService(&_GorumsStrictOrdering_serviceDesc, srv)
}

func _GorumsStrictOrdering_NodeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GorumsStrictOrderingServer).NodeStream(&gorumsStrictOrderingNodeStreamServer{stream})
}

type GorumsStrictOrdering_NodeStreamServer interface {
	Send(*GorumsMessage) error
	Recv() (*GorumsMessage, error)
	grpc.ServerStream
}

type gorumsStrictOrderingNodeStreamServer struct {
	grpc.ServerStream
}

func (x *gorumsStrictOrderingNodeStreamServer) Send(m *GorumsMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gorumsStrictOrderingNodeStreamServer) Recv() (*GorumsMessage, error) {
	m := new(GorumsMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GorumsStrictOrdering_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorums.GorumsStrictOrdering",
	HandlerType: (*GorumsStrictOrderingServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NodeStream",
			Handler:       _GorumsStrictOrdering_NodeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cmd/protoc-gen-gorums/dev/strictordering.proto",
}
