// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	empty "github.com/golang/protobuf/ptypes/empty"
)

// ZorumsService is the server-side API for the ZorumsService Service
type ZorumsService interface {
	Multicast(*Request)
	MulticastPerNodeArg(*Request)
	Multicast2(*Request)
	Multicast3(*Request)
	Multicast4(*empty.Empty)
	OrderingQC(*Request, func(*Response))
	OrderingPerNodeArg(*Request, func(*Response))
	OrderingCustomReturnType(*Request, func(*Response))
	OrderingCombo(*Request, func(*Response))
	OrderingUnaryRPC(*Request, func(*Response))
	OrderingFuture(*Request, func(*Response))
	OrderingFuturePerNodeArg(*Request, func(*Response))
	OrderingFutureCustomReturnType(*Request, func(*Response))
	OrderingFutureCombo(*Request, func(*Response))
	Unicast(*Request)
	Unicast2(*Request)
}

func (s *GorumsServer) RegisterZorumsServiceServer(srv ZorumsService) {
	s.srv.handlers[multicastMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast(req)
	}
	s.srv.handlers[multicastPerNodeArgMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.MulticastPerNodeArg(req)
	}
	s.srv.handlers[multicast2MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast2(req)
	}
	s.srv.handlers[multicast3MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Multicast3(req)
	}
	s.srv.handlers[multicast4MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*empty.Empty)
		srv.Multicast4(req)
	}
	s.srv.handlers[orderingQCMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingQC(req, f)
	}
	s.srv.handlers[orderingPerNodeArgMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingPerNodeArg(req, f)
	}
	s.srv.handlers[orderingCustomReturnTypeMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingCustomReturnType(req, f)
	}
	s.srv.handlers[orderingComboMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingCombo(req, f)
	}
	s.srv.handlers[orderingUnaryRPCMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingUnaryRPC(req, f)
	}
	s.srv.handlers[orderingFutureMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingFuture(req, f)
	}
	s.srv.handlers[orderingFuturePerNodeArgMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingFuturePerNodeArg(req, f)
	}
	s.srv.handlers[orderingFutureCustomReturnTypeMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingFutureCustomReturnType(req, f)
	}
	s.srv.handlers[orderingFutureComboMethodID] = func(in *gorumsMessage, finished chan<- *gorumsMessage) {
		req := in.message.(*Request)
		f := func(resp *Response) {
			finished <- &gorumsMessage{metadata: in.metadata, message: resp}
		}
		srv.OrderingFutureCombo(req, f)
	}
	s.srv.handlers[unicastMethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast(req)
	}
	s.srv.handlers[unicast2MethodID] = func(in *gorumsMessage, _ chan<- *gorumsMessage) {
		req := in.message.(*Request)
		srv.Unicast2(req)
	}
}
