// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	context "context"
	gorums "github.com/relab/gorums"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// QuorumCall plain.
func (c *Configuration) QuorumCall(ctx context.Context, in *Request) (resp *Response, err error) {

	cd := gorums.QuorumCallData{
		Manager:  c.mgr.Manager,
		Nodes:    c.nodes,
		Message:  in,
		MethodID: quorumCallMethodID,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		result, quorum := c.qspec.QuorumCallQF(req.(*Request), r)
		return result, quorum
	}

	res, err := gorums.QuorumCall(ctx, cd)
	return res.(*Response), err
}

// QuorumCall with per_node_arg option.
func (c *Configuration) QuorumCallPerNodeArg(ctx context.Context, in *Request, f func(*Request, uint32) *Request) (resp *Response, err error) {

	cd := gorums.QuorumCallData{
		Manager:  c.mgr.Manager,
		Nodes:    c.nodes,
		Message:  in,
		MethodID: quorumCallPerNodeArgMethodID,
	}
	cd.QuorumFunction = func(req protoreflect.ProtoMessage, replies map[uint32]protoreflect.ProtoMessage) (protoreflect.ProtoMessage, bool) {
		r := make(map[uint32]*Response, len(replies))
		for k, v := range replies {
			r[k] = v.(*Response)
		}
		result, quorum := c.qspec.QuorumCallPerNodeArgQF(req.(*Request), r)
		return result, quorum
	}
	cd.PerNodeArgFn = func(req protoreflect.ProtoMessage, nid uint32) protoreflect.ProtoMessage {
		return f(req.(*Request), nid)
	}

	res, err := gorums.QuorumCall(ctx, cd)
	return res.(*Response), err
}
