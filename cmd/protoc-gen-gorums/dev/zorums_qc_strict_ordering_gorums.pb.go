// Code generated by protoc-gen-gorums. DO NOT EDIT.

package dev

import (
	context "context"
	trace "golang.org/x/net/trace"
	grpc "google.golang.org/grpc"
	atomic "sync/atomic"
	time "time"
)

// StrictOrdering is a quorum call invoked on all nodes in configuration c,
// with the same argument in, and returns a combined result.
func (c *Configuration) StrictOrdering(ctx context.Context, in *Request, opts ...grpc.CallOption) (resp *Response, err error) {
	var ti traceInfo
	if c.mgr.opts.trace {
		ti.Trace = trace.New("gorums."+c.tstring()+".Sent", "StrictOrdering")
		defer ti.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = time.Until(deadline)
		}
		ti.LazyLog(&ti.firstLine, false)
		ti.LazyLog(&payload{sent: true, msg: in}, false)

		defer func() {
			ti.LazyLog(&qcresult{reply: resp, err: err}, false)
			if err != nil {
				ti.SetError()
			}
		}()
	}

	// get the ID which will be used to return the correct responses for a request
	msgID := atomic.AddUint64(&c.mgr.strictOrderingID, 1)
	in.MsgID = msgID

	// set up a channel to collect replies
	replies := make(chan *internalResponse, c.n)
	c.mgr.strictOrderingLock.Lock()
	c.mgr.strictOrderingRecv[msgID] = replies
	c.mgr.strictOrderingLock.Unlock()

	defer func() {
		// remove the replies channel when we are done
		c.mgr.strictOrderingLock.Lock()
		delete(c.mgr.strictOrderingRecv, msgID)
		c.mgr.strictOrderingLock.Unlock()
	}()

	// push the message to the nodes
	expected := c.n
	for _, n := range c.nodes {
		n.strictOrderingSend <- in
	}

	var (
		replyValues = make([]*Response, 0, expected)
		errs        []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replies:
			// TODO: An error from SendMsg/RecvMsg means that the stream has closed, so we probably don't need to check
			// for errors here.
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}

			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}

			replyValues = append(replyValues, r.reply)
			if resp, quorum = c.qspec.StrictOrderingQF(replyValues); quorum {
				return resp, nil
			}
		case <-ctx.Done():
			return resp, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}
		}

		if len(errs)+len(replyValues) == expected {
			return resp, QuorumCallError{"incomplete call", len(replyValues), errs}
		}
	}
}

// StrictOrderingServerLoop is a helper function that will receive messages on srv,
// generate a response message using getResponse, and send the response back on
// srv. The function returns when the stream ends, and returns the error that
// caused it to end.
func StrictOrderingServerLoop(srv ZorumsService_StrictOrderingServer, getResponse func(*Request) *Response) error {
	ctx := srv.Context()
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req, err := srv.Recv()
		if err != nil {
			return err
		}
		resp := getResponse(req)
		resp.MsgID = req.MsgID
		err = srv.Send(resp)
		if err != nil {
			return err
		}
	}
}
