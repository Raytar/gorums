// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gorums

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GorumsClient is the client API for Gorums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GorumsClient interface {
	StrictOrdering(ctx context.Context, opts ...grpc.CallOption) (Gorums_StrictOrderingClient, error)
}

type gorumsClient struct {
	cc *grpc.ClientConn
}

func NewGorumsClient(cc *grpc.ClientConn) GorumsClient {
	return &gorumsClient{cc}
}

func (c *gorumsClient) StrictOrdering(ctx context.Context, opts ...grpc.CallOption) (Gorums_StrictOrderingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gorums_serviceDesc.Streams[0], "/gorums.Gorums/StrictOrdering", opts...)
	if err != nil {
		return nil, err
	}
	x := &gorumsStrictOrderingClient{stream}
	return x, nil
}

type Gorums_StrictOrderingClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type gorumsStrictOrderingClient struct {
	grpc.ClientStream
}

func (x *gorumsStrictOrderingClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gorumsStrictOrderingClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GorumsServer is the server API for Gorums service.
type GorumsServer interface {
	StrictOrdering(Gorums_StrictOrderingServer) error
}

// UnimplementedGorumsServer can be embedded to have forward compatible implementations.
type UnimplementedGorumsServer struct {
}

func (*UnimplementedGorumsServer) StrictOrdering(Gorums_StrictOrderingServer) error {
	return status.Errorf(codes.Unimplemented, "method StrictOrdering not implemented")
}

func RegisterGorumsServer(s *grpc.Server, srv GorumsServer) {
	s.RegisterService(&_Gorums_serviceDesc, srv)
}

func _Gorums_StrictOrdering_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GorumsServer).StrictOrdering(&gorumsStrictOrderingServer{stream})
}

type Gorums_StrictOrderingServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type gorumsStrictOrderingServer struct {
	grpc.ServerStream
}

func (x *gorumsStrictOrderingServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gorumsStrictOrderingServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gorums_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorums.Gorums",
	HandlerType: (*GorumsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StrictOrdering",
			Handler:       _Gorums_StrictOrdering_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gorums.proto",
}
