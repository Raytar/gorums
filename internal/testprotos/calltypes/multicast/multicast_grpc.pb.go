// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package multicast

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MulticastClient is the client API for Multicast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MulticastClient interface {
	Multicast(ctx context.Context, opts ...grpc.CallOption) (Multicast_MulticastClient, error)
	// MulticastEmpty is testing imported message type.
	MulticastEmpty(ctx context.Context, opts ...grpc.CallOption) (Multicast_MulticastEmptyClient, error)
}

type multicastClient struct {
	cc grpc.ClientConnInterface
}

func NewMulticastClient(cc grpc.ClientConnInterface) MulticastClient {
	return &multicastClient{cc}
}

func (c *multicastClient) Multicast(ctx context.Context, opts ...grpc.CallOption) (Multicast_MulticastClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Multicast_serviceDesc.Streams[0], "/gorums.testprotos.calltypes.multicast.Multicast/Multicast", opts...)
	if err != nil {
		return nil, err
	}
	x := &multicastMulticastClient{stream}
	return x, nil
}

type Multicast_MulticastClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type multicastMulticastClient struct {
	grpc.ClientStream
}

func (x *multicastMulticastClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multicastMulticastClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *multicastClient) MulticastEmpty(ctx context.Context, opts ...grpc.CallOption) (Multicast_MulticastEmptyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Multicast_serviceDesc.Streams[1], "/gorums.testprotos.calltypes.multicast.Multicast/MulticastEmpty", opts...)
	if err != nil {
		return nil, err
	}
	x := &multicastMulticastEmptyClient{stream}
	return x, nil
}

type Multicast_MulticastEmptyClient interface {
	Send(*Request) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type multicastMulticastEmptyClient struct {
	grpc.ClientStream
}

func (x *multicastMulticastEmptyClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *multicastMulticastEmptyClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MulticastServer is the server API for Multicast service.
// All implementations must embed UnimplementedMulticastServer
// for forward compatibility
type MulticastServer interface {
	Multicast(Multicast_MulticastServer) error
	// MulticastEmpty is testing imported message type.
	MulticastEmpty(Multicast_MulticastEmptyServer) error
	mustEmbedUnimplementedMulticastServer()
}

// UnimplementedMulticastServer must be embedded to have forward compatible implementations.
type UnimplementedMulticastServer struct {
}

func (*UnimplementedMulticastServer) Multicast(Multicast_MulticastServer) error {
	return status.Errorf(codes.Unimplemented, "method Multicast not implemented")
}
func (*UnimplementedMulticastServer) MulticastEmpty(Multicast_MulticastEmptyServer) error {
	return status.Errorf(codes.Unimplemented, "method MulticastEmpty not implemented")
}
func (*UnimplementedMulticastServer) mustEmbedUnimplementedMulticastServer() {}

func RegisterMulticastServer(s *grpc.Server, srv MulticastServer) {
	s.RegisterService(&_Multicast_serviceDesc, srv)
}

func _Multicast_Multicast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MulticastServer).Multicast(&multicastMulticastServer{stream})
}

type Multicast_MulticastServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type multicastMulticastServer struct {
	grpc.ServerStream
}

func (x *multicastMulticastServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multicastMulticastServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Multicast_MulticastEmpty_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MulticastServer).MulticastEmpty(&multicastMulticastEmptyServer{stream})
}

type Multicast_MulticastEmptyServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type multicastMulticastEmptyServer struct {
	grpc.ServerStream
}

func (x *multicastMulticastEmptyServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *multicastMulticastEmptyServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Multicast_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorums.testprotos.calltypes.multicast.Multicast",
	HandlerType: (*MulticastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Multicast",
			Handler:       _Multicast_Multicast_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MulticastEmpty",
			Handler:       _Multicast_MulticastEmpty_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/testprotos/calltypes/multicast/multicast.proto",
}
