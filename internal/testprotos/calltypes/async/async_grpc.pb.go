// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package async

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AsyncQuorumCallClient is the client API for AsyncQuorumCall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AsyncQuorumCallClient interface {
	AsyncQuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type asyncQuorumCallClient struct {
	cc *grpc.ClientConn
}

func NewAsyncQuorumCallClient(cc *grpc.ClientConn) AsyncQuorumCallClient {
	return &asyncQuorumCallClient{cc}
}

func (c *asyncQuorumCallClient) AsyncQuorumCall(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/gorums.testprotos.calltypes.async.AsyncQuorumCall/AsyncQuorumCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsyncQuorumCallServer is the server API for AsyncQuorumCall service.
type AsyncQuorumCallServer interface {
	AsyncQuorumCall(context.Context, *Request) (*Response, error)
}

// UnimplementedAsyncQuorumCallServer can be embedded to have forward compatible implementations.
type UnimplementedAsyncQuorumCallServer struct {
}

func (*UnimplementedAsyncQuorumCallServer) AsyncQuorumCall(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AsyncQuorumCall not implemented")
}

func RegisterAsyncQuorumCallServer(s *grpc.Server, srv AsyncQuorumCallServer) {
	s.RegisterService(&_AsyncQuorumCall_serviceDesc, srv)
}

func _AsyncQuorumCall_AsyncQuorumCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncQuorumCallServer).AsyncQuorumCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gorums.testprotos.calltypes.async.AsyncQuorumCall/AsyncQuorumCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncQuorumCallServer).AsyncQuorumCall(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _AsyncQuorumCall_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gorums.testprotos.calltypes.async.AsyncQuorumCall",
	HandlerType: (*AsyncQuorumCallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AsyncQuorumCall",
			Handler:    _AsyncQuorumCall_AsyncQuorumCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/testprotos/calltypes/async/async.proto",
}
