{{/* Remember to run 'make dev' after editing this file. */}}

{{ $Pkg := .PackageName }}

{{if not .IgnoreImports}}
package {{ $Pkg }}

import (
	"context"
	"time"

	"golang.org/x/net/trace"
)
{{end}}

{{range .Services}}

{{if .StrictOrdering}}

/* Exported types and methods for strictly ordered quorum call method {{.MethodName}} */
{{if .PerNodeArg}}

// {{.MethodName}} is invoked as a quorum call on each node in configuration c,
// with the argument returned by the provided perNode function and returns the
// result. The perNode function takes a request arg and
// returns a {{.FQReqName}} object to be passed to the given nodeID.
// The perNode function should be thread-safe.
func (c *Configuration) {{.MethodName}}(ctx context.Context, a *{{.FQReqName}}, f func(arg {{.FQReqName}}, nodeID uint32) *{{.FQReqName}}) (resp *{{.FQCustomRespName}}, err error) {
{{- else}}

// {{.MethodName}} is invoked as a quorum call on all nodes in configuration c,
// using the same argument arg, and returns the result.
func (c *Configuration) {{.MethodName}}(ctx context.Context, a *{{.FQReqName}}) (resp *{{.FQCustomRespName}}, err error) {
{{- end}}
	{{- template "simple_trace" .}}

	msgID := c.mgr.next{{.MethodName}}ID()
	// get the ID which will be used to return the correct responses for a request
	a.{{.OrderingIDField}} = msgID
	
	// set up a channel to collect replies
	replies := make(chan *{{.UnexportedTypeName}}, c.n)
	c.mgr.{{.UnexportedMethodName}}Lock.Lock()
	c.mgr.{{.UnexportedMethodName}}Recv[msgID] = replies
	c.mgr.{{.UnexportedMethodName}}Lock.Unlock()
	
	defer func() {
		// remove the replies channel when we are done
		c.mgr.{{.UnexportedMethodName}}Lock.Lock()
		delete(c.mgr.{{.UnexportedMethodName}}Recv, msgID)
		close(replies)
		c.mgr.{{.UnexportedMethodName}}Lock.Unlock()
	}()
	
	// push the message to the nodes
	expected := c.n
	for _, n := range c.nodes {
{{- if .PerNodeArg}}
		nodeArg := f(*a, n.ID())
		if nodeArg == nil {
			expected--
			continue
		}
		nodeArg.{{.OrderingIDField}} = msgID
		n.{{.UnexportedMethodName}}Send <- nodeArg
{{- else}}
		n.{{.UnexportedMethodName}}Send <- a
{{end -}}
	}

	var (
		replyValues = make([]*{{.FQRespName}}, 0, expected)
		errs []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replies:
			// TODO: An error from SendMsg/RecvMsg means that the stream has closed, so we probably don't need to check
			// for errors here.
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}
			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
{{- if .QFWithReq}}
			if resp, quorum = c.qspec.{{.MethodName}}QF(a, replyValues); quorum {
{{else}}
			if resp, quorum = c.qspec.{{.MethodName}}QF(replyValues); quorum {
{{end -}}
				return resp, nil
			}
		case <-ctx.Done():
			return resp, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}
		}

		if len(errs)+len(replyValues) == expected {
			return resp, QuorumCallError{"incomplete call", len(replyValues), errs}
		}
	}
}

func {{.MethodName}}ServerLoop(srv {{.ServName}}_{{.MethodName}}Server, getResponse func(*{{.FQReqName}}) *{{.FQRespName}}) error {
	ctx := srv.Context()
	for {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}
		req, err := srv.Recv()
		if err != nil {
			return err
		}
		resp := getResponse(req)
		resp.{{.OrderingIDField}} = req.{{.OrderingIDField}}
		err = srv.Send(resp)
		if err != nil {
			return err
		}
	}
}

{{- end -}}
{{- end -}}
