// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dev/storage.proto

// Package dev provides a blueprint for testing the various call semantics provided by Gorums.
// The following table explains the differences in call semantics.
//
//                    Replies per server      Gorums termination check    # times qfunc can update result     Server-side reply type
// ------------------------------------------------------------------------------------------------------------------------------------------------
// Quorum call                 1                   Reply + error count                 1                           Single response
// Correctable Quorum Call     1                   Reply + error count                 N                           Single response
// Correctable Stream QC       M                   Error count                         M                           Stream of responses

package dev

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/relab/gorums"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type State struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	GorumsMessageID      uint32   `protobuf:"varint,3,opt,name=GorumsMessageID,proto3" json:"GorumsMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *State) Reset()      { *m = State{} }
func (*State) ProtoMessage() {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fbdedbd5938416, []int{0}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *State) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *State) GetGorumsMessageID() uint32 {
	if m != nil {
		return m.GorumsMessageID
	}
	return 0
}

type MyState struct {
	Value                string   `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp            int64    `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Extra                int64    `protobuf:"varint,3,opt,name=Extra,proto3" json:"Extra,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MyState) Reset()      { *m = MyState{} }
func (*MyState) ProtoMessage() {}
func (*MyState) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fbdedbd5938416, []int{1}
}
func (m *MyState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MyState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MyState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MyState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MyState.Merge(m, src)
}
func (m *MyState) XXX_Size() int {
	return m.Size()
}
func (m *MyState) XXX_DiscardUnknown() {
	xxx_messageInfo_MyState.DiscardUnknown(m)
}

var xxx_messageInfo_MyState proto.InternalMessageInfo

func (m *MyState) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MyState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MyState) GetExtra() int64 {
	if m != nil {
		return m.Extra
	}
	return 0
}

type WriteResponse struct {
	New                  bool     `protobuf:"varint,1,opt,name=New,proto3" json:"New,omitempty"`
	GorumsMessageID      uint32   `protobuf:"varint,2,opt,name=GorumsMessageID,proto3" json:"GorumsMessageID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteResponse) Reset()      { *m = WriteResponse{} }
func (*WriteResponse) ProtoMessage() {}
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fbdedbd5938416, []int{2}
}
func (m *WriteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WriteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResponse.Merge(m, src)
}
func (m *WriteResponse) XXX_Size() int {
	return m.Size()
}
func (m *WriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResponse proto.InternalMessageInfo

func (m *WriteResponse) GetNew() bool {
	if m != nil {
		return m.New
	}
	return false
}

func (m *WriteResponse) GetGorumsMessageID() uint32 {
	if m != nil {
		return m.GorumsMessageID
	}
	return 0
}

type ReadRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRequest) Reset()      { *m = ReadRequest{} }
func (*ReadRequest) ProtoMessage() {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fbdedbd5938416, []int{3}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(m, src)
}
func (m *ReadRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()      { *m = Empty{} }
func (*Empty) ProtoMessage() {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fbdedbd5938416, []int{4}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return m.Size()
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*State)(nil), "dev.State")
	proto.RegisterType((*MyState)(nil), "dev.MyState")
	proto.RegisterType((*WriteResponse)(nil), "dev.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "dev.ReadRequest")
	proto.RegisterType((*Empty)(nil), "dev.Empty")
}

func init() { proto.RegisterFile("dev/storage.proto", fileDescriptor_d9fbdedbd5938416) }

var fileDescriptor_d9fbdedbd5938416 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xb1, 0x6f, 0xd3, 0x40,
	0x14, 0xc6, 0x73, 0x75, 0x4c, 0xd2, 0x57, 0xa2, 0x84, 0xa3, 0x48, 0x56, 0x84, 0xac, 0xc8, 0xea,
	0x60, 0x55, 0x28, 0x09, 0x20, 0x04, 0x0b, 0x43, 0x29, 0xa5, 0x42, 0xa8, 0x01, 0x2e, 0x08, 0xe6,
	0x4b, 0xfc, 0x14, 0x22, 0xc5, 0xb9, 0x70, 0x77, 0x0e, 0x64, 0xeb, 0xc8, 0xd8, 0x91, 0xb1, 0x23,
	0x23, 0x4b, 0x16, 0x46, 0x26, 0xc6, 0x8e, 0x8c, 0xd4, 0x2c, 0xb0, 0x21, 0xf1, 0x0f, 0xa0, 0x3b,
	0x07, 0x68, 0xa3, 0x4a, 0x46, 0x9d, 0xfc, 0xee, 0xbd, 0xef, 0xf7, 0xbe, 0xe7, 0x7b, 0x36, 0x5c,
	0x8a, 0x70, 0xda, 0x52, 0x5a, 0x48, 0x3e, 0xc0, 0xe6, 0x44, 0x0a, 0x2d, 0xa8, 0x13, 0xe1, 0xb4,
	0xbe, 0x31, 0x18, 0xea, 0x97, 0x49, 0xaf, 0xd9, 0x17, 0x71, 0x4b, 0xe2, 0x88, 0xf7, 0x5a, 0x03,
	0x21, 0x93, 0x58, 0x2d, 0x1e, 0x99, 0x34, 0x40, 0x70, 0xbb, 0x9a, 0x6b, 0xa4, 0xeb, 0xe0, 0x3e,
	0xe7, 0xa3, 0x04, 0x3d, 0xd2, 0x20, 0xe1, 0x2a, 0xcb, 0x0e, 0xf4, 0x2a, 0xac, 0x3e, 0x1b, 0xc6,
	0xa8, 0x34, 0x8f, 0x27, 0xde, 0x4a, 0x83, 0x84, 0x0e, 0xfb, 0x97, 0xa0, 0x21, 0x54, 0x77, 0x6d,
	0xb3, 0x3d, 0x54, 0x8a, 0x0f, 0xf0, 0xe1, 0x7d, 0xcf, 0x69, 0x90, 0xb0, 0xc2, 0x96, 0xd3, 0x41,
	0x17, 0x4a, 0x7b, 0xb3, 0xf3, 0x1b, 0xad, 0x83, 0xbb, 0xf3, 0x46, 0x4b, 0x6e, 0xdb, 0x3b, 0x2c,
	0x3b, 0x04, 0x8f, 0xa0, 0xf2, 0x42, 0x0e, 0x35, 0x32, 0x54, 0x13, 0x31, 0x56, 0x48, 0x6b, 0xe0,
	0x74, 0xf0, 0xb5, 0x6d, 0x5c, 0x66, 0x26, 0x3c, 0x6b, 0xc2, 0x95, 0xb3, 0x27, 0xac, 0xc0, 0x1a,
	0x43, 0x1e, 0x31, 0x7c, 0x95, 0xa0, 0xd2, 0x41, 0x09, 0xdc, 0x9d, 0x78, 0xa2, 0x67, 0x37, 0x7e,
	0x14, 0xa1, 0xd4, 0xcd, 0x6e, 0x97, 0x6e, 0x42, 0xd9, 0x68, 0x3a, 0xe2, 0xe9, 0x36, 0xad, 0x35,
	0x23, 0x9c, 0x36, 0x4f, 0x20, 0x75, 0xb0, 0x19, 0xfb, 0x92, 0x41, 0x81, 0x6e, 0x42, 0xd1, 0x14,
	0x73, 0x74, 0xc5, 0xfd, 0xb9, 0x47, 0x68, 0x1b, 0xc0, 0x08, 0x1e, 0x24, 0x3a, 0x91, 0x98, 0x47,
	0x1c, 0x1a, 0x62, 0x0b, 0x6a, 0x46, 0xb0, 0x9d, 0x28, 0x2d, 0x62, 0x86, 0x3a, 0x91, 0xe3, 0x1c,
	0xae, 0x6a, 0x9c, 0x3e, 0xfd, 0xf2, 0xfe, 0xee, 0xe1, 0x16, 0x54, 0x6d, 0x0b, 0x21, 0x25, 0xf6,
	0x35, 0xef, 0x8d, 0x72, 0x9d, 0xdf, 0x1a, 0xe7, 0xbb, 0x70, 0x65, 0x09, 0xeb, 0x6a, 0x89, 0x3c,
	0xce, 0x83, 0x0f, 0xe6, 0x1e, 0x69, 0x13, 0x7a, 0x1d, 0x5c, 0xbb, 0x33, 0x7a, 0xa2, 0x58, 0xa7,
	0x36, 0x3e, 0xb5, 0xcb, 0xa0, 0x6c, 0xe6, 0x7d, 0x6f, 0x1c, 0x6f, 0xc3, 0x9a, 0x2d, 0x2d, 0xae,
	0x27, 0x17, 0x3c, 0xfc, 0x03, 0x5e, 0x03, 0xb0, 0xa5, 0x2d, 0x35, 0x1b, 0xf7, 0x4f, 0x71, 0x59,
	0x6c, 0x17, 0x1c, 0x14, 0xdf, 0xcd, 0x3d, 0x12, 0x12, 0x7a, 0x07, 0x2e, 0x5a, 0xf5, 0x13, 0x94,
	0x1d, 0x11, 0xfd, 0xe7, 0x80, 0x1f, 0x8c, 0xcf, 0xee, 0x82, 0x7c, 0x2c, 0x23, 0x94, 0x18, 0xe5,
	0x92, 0x97, 0x3f, 0xce, 0xbd, 0xe5, 0xef, 0x2f, 0x24, 0x6d, 0x72, 0x6f, 0xe3, 0xe8, 0xd8, 0x2f,
	0x7c, 0x39, 0xf6, 0x0b, 0xfb, 0xa9, 0x4f, 0x3e, 0xa7, 0x3e, 0x39, 0x4a, 0x7d, 0xf2, 0x35, 0xf5,
	0xc9, 0xf7, 0xd4, 0x2f, 0xfc, 0x4c, 0x7d, 0x72, 0xf0, 0xcd, 0x2f, 0xf4, 0x2e, 0xd8, 0x3f, 0xf7,
	0xe6, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x92, 0x4d, 0x6c, 0x4d, 0xf9, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StorageClient interface {
	// ReadNoQC is a plain gRPC call.
	ReadNoQC(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// Read is a synchronous quorum call that returns a single State object
	// once a quorum of replies have been received. The returned State object
	// is computed by the quorum function.
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadFuture is an asynchronous quorum call that
	// returns a FutureState object for retrieving results.
	ReadFuture(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadCustomReturn is a synchronous quorum call with a custom return type MyState.
	ReadCustomReturn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadCorrectable is an asynchronous correctable quorum call that
	// returns a CorrectableState object for retrieving results.
	// Each server will reply with at most one result that the client
	// can process in its quorum function.
	ReadCorrectable(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error)
	// ReadCorrectableStream is an asynchronous correctable stream call that
	// returns a CorrectableStreamState object for retrieving results.
	// Each server can send a stream of responses that the client can process
	// in its quorum function.
	ReadCorrectableStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Storage_ReadCorrectableStreamClient, error)
	// Write is a synchronous quorum call, in which the State request argument
	// is also passed to the associated quorum function, WriteQF, for this method.
	Write(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
	// WriteFuture is an asynchronous quorum call that
	// returns a FutureWriteResponse object for retrieving results.
	// The request argument (State) is also passed to the associated
	// quorum function, WriteFutureQF, for this method.
	WriteFuture(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
	// WriteAsync is an asynchronous multicast to all nodes in a configuration.
	// No replies are collected.
	WriteAsync(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteAsyncClient, error)
	// WritePerNode is a synchronous quorum call, where, for each node,
	// a provided function is called to determine the argument to be sent
	// to that node. This is useful for quorum calls where the different
	// servers/nodes expect a variation over the input argument.
	WritePerNode(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error)
	// WriteOrdered is a synchronous quorum call that enforces a strict
	// ordering of the messages that are sent to a node, such that
	// a quorum call Q1 will deliver its messages to the nodes
	// respectively before a later quorum call Q2 delivers its messages.
	// The order of replies is not guaranteed for concurrent quorum calls.
	WriteOrdered(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteOrderedClient, error)
}

type storageClient struct {
	cc *grpc.ClientConn
}

func NewStorageClient(cc *grpc.ClientConn) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) ReadNoQC(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/dev.Storage/ReadNoQC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/dev.Storage/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadFuture(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/dev.Storage/ReadFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadCustomReturn(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/dev.Storage/ReadCustomReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadCorrectable(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, "/dev.Storage/ReadCorrectable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) ReadCorrectableStream(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (Storage_ReadCorrectableStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[0], "/dev.Storage/ReadCorrectableStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageReadCorrectableStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Storage_ReadCorrectableStreamClient interface {
	Recv() (*State, error)
	grpc.ClientStream
}

type storageReadCorrectableStreamClient struct {
	grpc.ClientStream
}

func (x *storageReadCorrectableStreamClient) Recv() (*State, error) {
	m := new(State)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) Write(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/dev.Storage/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteFuture(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/dev.Storage/WriteFuture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteAsync(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteAsyncClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[1], "/dev.Storage/WriteAsync", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWriteAsyncClient{stream}
	return x, nil
}

type Storage_WriteAsyncClient interface {
	Send(*State) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type storageWriteAsyncClient struct {
	grpc.ClientStream
}

func (x *storageWriteAsyncClient) Send(m *State) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageWriteAsyncClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageClient) WritePerNode(ctx context.Context, in *State, opts ...grpc.CallOption) (*WriteResponse, error) {
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, "/dev.Storage/WritePerNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) WriteOrdered(ctx context.Context, opts ...grpc.CallOption) (Storage_WriteOrderedClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Storage_serviceDesc.Streams[2], "/dev.Storage/WriteOrdered", opts...)
	if err != nil {
		return nil, err
	}
	x := &storageWriteOrderedClient{stream}
	return x, nil
}

type Storage_WriteOrderedClient interface {
	Send(*State) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type storageWriteOrderedClient struct {
	grpc.ClientStream
}

func (x *storageWriteOrderedClient) Send(m *State) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageWriteOrderedClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StorageServer is the server API for Storage service.
type StorageServer interface {
	// ReadNoQC is a plain gRPC call.
	ReadNoQC(context.Context, *ReadRequest) (*State, error)
	// Read is a synchronous quorum call that returns a single State object
	// once a quorum of replies have been received. The returned State object
	// is computed by the quorum function.
	Read(context.Context, *ReadRequest) (*State, error)
	// ReadFuture is an asynchronous quorum call that
	// returns a FutureState object for retrieving results.
	ReadFuture(context.Context, *ReadRequest) (*State, error)
	// ReadCustomReturn is a synchronous quorum call with a custom return type MyState.
	ReadCustomReturn(context.Context, *ReadRequest) (*State, error)
	// ReadCorrectable is an asynchronous correctable quorum call that
	// returns a CorrectableState object for retrieving results.
	// Each server will reply with at most one result that the client
	// can process in its quorum function.
	ReadCorrectable(context.Context, *ReadRequest) (*State, error)
	// ReadCorrectableStream is an asynchronous correctable stream call that
	// returns a CorrectableStreamState object for retrieving results.
	// Each server can send a stream of responses that the client can process
	// in its quorum function.
	ReadCorrectableStream(*ReadRequest, Storage_ReadCorrectableStreamServer) error
	// Write is a synchronous quorum call, in which the State request argument
	// is also passed to the associated quorum function, WriteQF, for this method.
	Write(context.Context, *State) (*WriteResponse, error)
	// WriteFuture is an asynchronous quorum call that
	// returns a FutureWriteResponse object for retrieving results.
	// The request argument (State) is also passed to the associated
	// quorum function, WriteFutureQF, for this method.
	WriteFuture(context.Context, *State) (*WriteResponse, error)
	// WriteAsync is an asynchronous multicast to all nodes in a configuration.
	// No replies are collected.
	WriteAsync(Storage_WriteAsyncServer) error
	// WritePerNode is a synchronous quorum call, where, for each node,
	// a provided function is called to determine the argument to be sent
	// to that node. This is useful for quorum calls where the different
	// servers/nodes expect a variation over the input argument.
	WritePerNode(context.Context, *State) (*WriteResponse, error)
	// WriteOrdered is a synchronous quorum call that enforces a strict
	// ordering of the messages that are sent to a node, such that
	// a quorum call Q1 will deliver its messages to the nodes
	// respectively before a later quorum call Q2 delivers its messages.
	// The order of replies is not guaranteed for concurrent quorum calls.
	WriteOrdered(Storage_WriteOrderedServer) error
}

// UnimplementedStorageServer can be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (*UnimplementedStorageServer) ReadNoQC(ctx context.Context, req *ReadRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadNoQC not implemented")
}
func (*UnimplementedStorageServer) Read(ctx context.Context, req *ReadRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (*UnimplementedStorageServer) ReadFuture(ctx context.Context, req *ReadRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFuture not implemented")
}
func (*UnimplementedStorageServer) ReadCustomReturn(ctx context.Context, req *ReadRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCustomReturn not implemented")
}
func (*UnimplementedStorageServer) ReadCorrectable(ctx context.Context, req *ReadRequest) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCorrectable not implemented")
}
func (*UnimplementedStorageServer) ReadCorrectableStream(req *ReadRequest, srv Storage_ReadCorrectableStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadCorrectableStream not implemented")
}
func (*UnimplementedStorageServer) Write(ctx context.Context, req *State) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (*UnimplementedStorageServer) WriteFuture(ctx context.Context, req *State) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFuture not implemented")
}
func (*UnimplementedStorageServer) WriteAsync(srv Storage_WriteAsyncServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteAsync not implemented")
}
func (*UnimplementedStorageServer) WritePerNode(ctx context.Context, req *State) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WritePerNode not implemented")
}
func (*UnimplementedStorageServer) WriteOrdered(srv Storage_WriteOrderedServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteOrdered not implemented")
}

func RegisterStorageServer(s *grpc.Server, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_ReadNoQC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadNoQC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadNoQC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadNoQC(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadFuture(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadCustomReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadCustomReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadCustomReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadCustomReturn(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadCorrectable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).ReadCorrectable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/ReadCorrectable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).ReadCorrectable(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_ReadCorrectableStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServer).ReadCorrectableStream(m, &storageReadCorrectableStreamServer{stream})
}

type Storage_ReadCorrectableStreamServer interface {
	Send(*State) error
	grpc.ServerStream
}

type storageReadCorrectableStreamServer struct {
	grpc.ServerStream
}

func (x *storageReadCorrectableStreamServer) Send(m *State) error {
	return x.ServerStream.SendMsg(m)
}

func _Storage_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Write(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteFuture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).WriteFuture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/WriteFuture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).WriteFuture(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteAsync_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).WriteAsync(&storageWriteAsyncServer{stream})
}

type Storage_WriteAsyncServer interface {
	SendAndClose(*Empty) error
	Recv() (*State, error)
	grpc.ServerStream
}

type storageWriteAsyncServer struct {
	grpc.ServerStream
}

func (x *storageWriteAsyncServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageWriteAsyncServer) Recv() (*State, error) {
	m := new(State)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Storage_WritePerNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).WritePerNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.Storage/WritePerNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).WritePerNode(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_WriteOrdered_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServer).WriteOrdered(&storageWriteOrderedServer{stream})
}

type Storage_WriteOrderedServer interface {
	Send(*WriteResponse) error
	Recv() (*State, error)
	grpc.ServerStream
}

type storageWriteOrderedServer struct {
	grpc.ServerStream
}

func (x *storageWriteOrderedServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageWriteOrderedServer) Recv() (*State, error) {
	m := new(State)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dev.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadNoQC",
			Handler:    _Storage_ReadNoQC_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Storage_Read_Handler,
		},
		{
			MethodName: "ReadFuture",
			Handler:    _Storage_ReadFuture_Handler,
		},
		{
			MethodName: "ReadCustomReturn",
			Handler:    _Storage_ReadCustomReturn_Handler,
		},
		{
			MethodName: "ReadCorrectable",
			Handler:    _Storage_ReadCorrectable_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Storage_Write_Handler,
		},
		{
			MethodName: "WriteFuture",
			Handler:    _Storage_WriteFuture_Handler,
		},
		{
			MethodName: "WritePerNode",
			Handler:    _Storage_WritePerNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadCorrectableStream",
			Handler:       _Storage_ReadCorrectableStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteAsync",
			Handler:       _Storage_WriteAsync_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "WriteOrdered",
			Handler:       _Storage_WriteOrdered_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dev/storage.proto",
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GorumsMessageID != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.GorumsMessageID))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MyState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MyState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Extra != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Extra))
		i--
		dAtA[i] = 0x18
	}
	if m.Timestamp != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintStorage(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WriteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WriteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WriteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GorumsMessageID != 0 {
		i = encodeVarintStorage(dAtA, i, uint64(m.GorumsMessageID))
		i--
		dAtA[i] = 0x10
	}
	if m.New {
		i--
		if m.New {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReadRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReadRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Empty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintStorage(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStorage(uint64(m.Timestamp))
	}
	if m.GorumsMessageID != 0 {
		n += 1 + sovStorage(uint64(m.GorumsMessageID))
	}
	return n
}

func (m *MyState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovStorage(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovStorage(uint64(m.Timestamp))
	}
	if m.Extra != 0 {
		n += 1 + sovStorage(uint64(m.Extra))
	}
	return n
}

func (m *WriteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.New {
		n += 2
	}
	if m.GorumsMessageID != 0 {
		n += 1 + sovStorage(uint64(m.GorumsMessageID))
	}
	return n
}

func (m *ReadRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Empty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovStorage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorage(x uint64) (n int) {
	return sovStorage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *State) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&State{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`GorumsMessageID:` + fmt.Sprintf("%v", this.GorumsMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MyState) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MyState{`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Extra:` + fmt.Sprintf("%v", this.Extra) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WriteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WriteResponse{`,
		`New:` + fmt.Sprintf("%v", this.New) + `,`,
		`GorumsMessageID:` + fmt.Sprintf("%v", this.GorumsMessageID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ReadRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReadRequest{`,
		`}`,
	}, "")
	return s
}
func (this *Empty) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Empty{`,
		`}`,
	}, "")
	return s
}
func valueToStringStorage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GorumsMessageID", wireType)
			}
			m.GorumsMessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GorumsMessageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			m.Extra = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Extra |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WriteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WriteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WriteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field New", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.New = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GorumsMessageID", wireType)
			}
			m.GorumsMessageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GorumsMessageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipStorage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthStorage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorage = fmt.Errorf("proto: unexpected end of group")
)
