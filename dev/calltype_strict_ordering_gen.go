// Code generated by protoc-gen-gorums. DO NOT EDIT.
// Source file to edit is: dev/storage.proto
// Template file to edit is: calltype_strict_ordering.tmpl

package dev

import (
	"context"
	"fmt"
	"io"
	"sync"
	"time"

	"golang.org/x/net/trace"
)

/* Exported types and methods for strictly ordered quorum call method ReadOrdered */
type ReadOrderedStream struct {
	mu      sync.Mutex
	nextID  uint64
	streams map[uint32]Storage_ReadOrderedClient
	sendQ   map[uint32]chan *ReadRequest  // Maps a node ID to the send channel for that node
	recvQ   map[uint64]chan internalState // Maps a message ID to the receive channel for that message
	cancel  func()
}

func (c *Configuration) NewReadOrderedStream() (*ReadOrderedStream, error) {
	s := &ReadOrderedStream{
		streams: make(map[uint32]Storage_ReadOrderedClient),
		sendQ:   make(map[uint32]chan *ReadRequest),
		recvQ:   make(map[uint64]chan internalState),
	}

	ctx, cancel := context.WithCancel(context.Background())
	s.cancel = cancel

	for _, node := range c.nodes {
		s.sendQ[node.id] = make(chan *ReadRequest, 1)
		stream, err := node.ReadOrdered(ctx)
		if err != nil {
			cancel()
			close(s.sendQ[node.id])
			return nil, fmt.Errorf("stream creation failed: %w", err)
		}
		s.streams[node.id] = stream

		go s.sendMsgs(node)
		go s.recvMsgs(node)
	}

	return s, nil
}

func (s *ReadOrderedStream) sendMsgs(node *Node) {
	stream := s.streams[node.id]
	sendQ := s.sendQ[node.id]
	for msg := range sendQ {
		err := stream.SendMsg(msg)
		// TODO: figure out how to handle a stream ending prematurely
		if err != nil {
			if err != io.EOF {
				node.setLastErr(err)
			}
			return
		}
	}
}

func (s *ReadOrderedStream) recvMsgs(node *Node) {
	stream := s.streams[node.id]
	msg := new(State)
	for {
		err := stream.RecvMsg(msg)
		// TODO: figure out how to handle a stream ending prematurely
		if err != nil {
			if err != io.EOF {
				node.setLastErr(err)
			}
			return
		}
		s.mu.Lock()
		id := msg.GorumsMessageID
		if c, ok := s.recvQ[id]; ok {
			c <- internalState{node.id, msg, err}
		}
		s.mu.Unlock()
	}
}

func (s *ReadOrderedStream) Close() {
	s.mu.Lock()
	defer s.mu.Unlock()

	for _, c := range s.sendQ {
		close(c)
	}
	for _, cs := range s.streams {
		// TODO: figure out if the error needs to be handled
		cs.CloseSend()
	}
}

func (s *ReadOrderedStream) getNextID() uint64 {
	s.mu.Lock()
	defer s.mu.Unlock()
	s.nextID++
	return s.nextID
}

// ReadOrdered is invoked as a quorum call on all nodes in configuration c,
// using the same argument arg, and returns the result.
func (c *Configuration) ReadOrdered(ctx context.Context, s *ReadOrderedStream, a *ReadRequest) (resp *State, err error) {
	var ti traceInfo
	if c.mgr.opts.trace {
		ti.Trace = trace.New("gorums."+c.tstring()+".Sent", "ReadOrdered")
		defer ti.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = time.Until(deadline)
		}
		ti.LazyLog(&ti.firstLine, false)
		ti.LazyLog(&payload{sent: true, msg: a}, false)

		defer func() {
			ti.LazyLog(&qcresult{
				reply: resp,
				err:   err,
			}, false)
			if err != nil {
				ti.SetError()
			}
		}()
	}

	msgID := s.getNextID()
	// get the ID which will be used to return the correct responses for a request
	a.GorumsMessageID = msgID

	// set up a channel to collect replies
	replies := make(chan internalState, c.n)
	s.mu.Lock()
	s.recvQ[msgID] = replies
	s.mu.Unlock()

	defer func() {
		// remove the replies channel when we are done
		s.mu.Lock()
		delete(s.recvQ, msgID)
		close(replies)
		s.mu.Unlock()
	}()

	// push the message to the nodes
	expected := c.n
	for _, n := range c.nodes {
		s.sendQ[n.ID()] <- a
	}

	var (
		replyValues = make([]*State, 0, expected)
		errs        []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replies:
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}
			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if resp, quorum = c.qspec.ReadOrderedQF(replyValues); quorum {
				return resp, nil
			}
		case <-ctx.Done():
			return resp, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}
		}

		if len(errs)+len(replyValues) == expected {
			return resp, QuorumCallError{"incomplete call", len(replyValues), errs}
		}
	}
}
