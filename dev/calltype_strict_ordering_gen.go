// Code generated by protoc-gen-gorums. DO NOT EDIT.
// Source file to edit is: dev/storage.proto
// Template file to edit is: calltype_strict_ordering.tmpl

package dev

import (
	"context"
	"time"

	"golang.org/x/net/trace"
)

/* Exported types and methods for strictly ordered quorum call method WriteOrdered */

// WriteOrdered is invoked as a quorum call on all nodes in configuration c,
// using the same argument arg, and returns the result.
func (c *Configuration) WriteOrdered(ctx context.Context, a *State) (resp *WriteResponse, err error) {
	var ti traceInfo
	if c.mgr.opts.trace {
		ti.Trace = trace.New("gorums."+c.tstring()+".Sent", "WriteOrdered")
		defer ti.Finish()

		ti.firstLine.cid = c.id
		if deadline, ok := ctx.Deadline(); ok {
			ti.firstLine.deadline = time.Until(deadline)
		}
		ti.LazyLog(&ti.firstLine, false)
		ti.LazyLog(&payload{sent: true, msg: a}, false)

		defer func() {
			ti.LazyLog(&qcresult{
				reply: resp,
				err:   err,
			}, false)
			if err != nil {
				ti.SetError()
			}
		}()
	}

	msgID := c.mgr.nextWriteOrderedID()
	// get the ID which will be used to return the correct responses for a request
	a.GorumsMessageID = msgID

	// set up a channel to collect replies
	replies := make(chan *internalWriteResponse, c.n)
	c.mgr.writeOrderedLock.Lock()
	c.mgr.writeOrderedRecv[msgID] = replies
	c.mgr.writeOrderedLock.Unlock()

	defer func() {
		// remove the replies channel when we are done
		c.mgr.writeOrderedLock.Lock()
		delete(c.mgr.writeOrderedRecv, msgID)
		close(replies)
		c.mgr.writeOrderedLock.Unlock()
	}()

	// push the message to the nodes
	expected := c.n
	for _, n := range c.nodes {
		n.writeOrderedSend <- a
	}

	var (
		replyValues = make([]*WriteResponse, 0, expected)
		errs        []GRPCError
		quorum      bool
	)

	for {
		select {
		case r := <-replies:
			// TODO: An error from SendMsg/RecvMsg means that the stream has closed, so we probably don't need to check
			// for errors here.
			if r.err != nil {
				errs = append(errs, GRPCError{r.nid, r.err})
				break
			}
			if c.mgr.opts.trace {
				ti.LazyLog(&payload{sent: false, id: r.nid, msg: r.reply}, false)
			}
			replyValues = append(replyValues, r.reply)
			if resp, quorum = c.qspec.WriteOrderedQF(replyValues); quorum {
				return resp, nil
			}
		case <-ctx.Done():
			return resp, QuorumCallError{ctx.Err().Error(), len(replyValues), errs}
		}

		if len(errs)+len(replyValues) == expected {
			return resp, QuorumCallError{"incomplete call", len(replyValues), errs}
		}
	}
}
